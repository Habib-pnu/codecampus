import type { Exercise, ProgressDataPoint, CodeSnippet, ClassGroup, User, Lab, Institution, BillingTransaction } from '@/types';

export const initialMockInstitutions: Institution[] = [
  { id: 'default-institution-001', name: 'PNU', pricePerStudent: 5, adminUserIds: ['admin-001'] }
];

export const mockExercises: Exercise[] = [
  {
    id: 1,
    title: { en: "Hello, World! and First Initial" },
    description: { en: "Write a program that prints 'Hello, World!', then prompts for the user's first initial, and finally prints a welcome message with the initial." },
    difficulty: "beginner",
    startingCode: "#include <iostream>\nusing namespace std;\n\nint main() {\n  // Part 1: Print \"Hello, World!\"\n  cout << \"Hello, World!\" << endl;\n\n  // Part 2: Get the first initial and print a welcome message\n  char firstInitial;\n  cout << \"Please enter your first initial: \";\n  cin >> firstInitial;\n  cout << \"Welcome, \" << firstInitial << \"!\" << endl;\n\n  return 0;\n}",
    points: 10,
    language: "cpp",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 2,
    title: { en: "Check for Even Number" },
    description: { en: "Write a program that accepts one integer and checks if it is an even number. If it is, it should print 'Even number'." },
    difficulty: "beginner",
    startingCode: "#include <iostream>\nusing namespace std;\n\nint main() {\n  int number;\n  cout << \"Enter a number: \";\n  cin >> number;\n  // Write the if statement to check for an even number here\n  if (number % 2 == 0) {\n    cout << \"Even number\" << endl;\n  }\n  return 0;\n}",
    points: 10,
    language: "cpp",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 3,
    title: { en: "Check for Even or Odd Number" },
    description: { en: "Write a program that accepts one integer and checks if it is even or odd, then prints the result accordingly." },
    difficulty: "beginner",
    startingCode: "#include <iostream>\nusing namespace std;\n\nint main() {\n  int number;\n  cout << \"Enter a number: \";\n  cin >> number;\n  // Write the if-else statement to check and print the result here\n  if (number % 2 == 0) {\n    cout << \"Even number\" << endl;\n  } else {\n    cout << \"Odd number\" << endl;\n  }\n  return 0;\n}",
    points: 10,
    language: "cpp",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 4,
    title: { en: "Simple Food Menu" },
    description: { en: "Write a program that accepts a number from 1-3 representing a food menu (1: Noodles, 2: Fried Rice, 3: Papaya Salad) and displays the selected menu name. If another number is entered, it should display 'Menu not available'." },
    difficulty: "beginner",
    startingCode: "#include <iostream>\nusing namespace std;\n\nint main() {\n  int choice;\n  cout << \"Select a menu (1-3): \";\n  cin >> choice;\n  // Write the switch-case statement to display the menu name here\n  switch (choice) {\n    case 1:\n      cout << \"Noodles\" << endl;\n      break;\n    case 2:\n      cout << \"Fried Rice\" << endl;\n      break;\n    case 3:\n      cout << \"Papaya Salad\" << endl;\n      break;\n    default:\n      cout << \"Menu not available\" << endl;\n  }\n  return 0;\n}",
    points: 15,
    language: "cpp",
    creatorId: "admin-001",
    scope: "institutional",
  },
  {
    id: 5,
    title: { en: "Countdown with while loop" },
    description: { en: "Write a program that accepts an integer N and uses a while loop to display a countdown from N to 1." },
    difficulty: "beginner",
    startingCode: "#include <iostream>\nusing namespace std;\n\nint main() {\n  int n;\n  cout << \"Enter a number to count down from: \";\n  cin >> n;\n  // Write the while loop to count down and print here (each number on a new line)\n  while (n >= 1) {\n    cout << n << endl;\n    n--;\n  }\n  return 0;\n}",
    points: 15,
    language: "cpp",
    creatorId: "admin-001",
    scope: "personal",
  },
  {
    id: 6,
    title: { en: "Input until Positive (do while)" },
    description: { en: "Write a program that uses a do-while loop to continuously accept an integer from the user until a number greater than 0 is entered, then display that number." },
    difficulty: "beginner",
    startingCode: "#include <iostream>\nusing namespace std;\n\nint main() {\n  int number;\n  // Write the do-while loop to get input here\n  do {\n    cout << \"Enter a number (must be positive): \";\n    cin >> number;\n  } while (number <= 0);\n\n  cout << \"The correct number is: \" << number << endl;\n  return 0;\n}",
    points: 15,
    language: "cpp",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 7,
    title: { en: "Sum of 1 to N (for loop)" },
    description: { en: "Write a program that accepts an integer N and uses a for loop to calculate the sum of numbers from 1 to N, then display the result." },
    difficulty: "beginner",
    startingCode: "#include <iostream>\nusing namespace std;\n\nint main() {\n  int n;\n  int sum = 0;\n  cout << \"Enter number N: \";\n  cin >> n;\n  // Write the for loop to calculate the sum here\n  for (int i = 1; i <= n; ++i) {\n    sum += i;\n  }\n  cout << \"The sum is: \" << sum << endl;\n  return 0;\n}",
    points: 15,
    language: "cpp",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 8,
    title: { en: "Find Max in 1D Array (Advanced)" },
    description: { en: "Write a program that creates an array of size 5, accepts 5 integers from the user to store in the array, then finds the maximum value in the array and displays it.\nHint: You may need to loop to get the values and loop again to find the maximum. Don't forget to declare a variable to hold the maximum value before starting the loop!" },
    difficulty: "advanced",
    startingCode: "#include <iostream>\nusing namespace std;\n\nint main() {\n  int arr[5];\n  cout << \"Enter 5 numbers:\" << endl;\n  // Loop to get values into the array\n  for (int i = 0; i < 5; ++i) {\n    cin >> arr[i];\n  }\n\n  int maxVal = arr[0]; // Assume the first element is the max value initially\n  // Loop to find the maximum value\n  for (int i = 1; i < 5; ++i) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n    }\n  }\n  cout << \"The maximum value in the array is: \" << maxVal << endl;\n  return 0;\n}",
    points: 25,
    language: "cpp",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 9,
    title: { en: "Python: Hello Name!" },
    description: { en: "Write a Python program that accepts a name from the user and then displays a greeting message." },
    difficulty: "beginner",
    startingCode: "name = input(\"Enter your name: \")\n# Print a greeting message using the entered name\nprint(f\"Hello, {name}!\")",
    points: 10,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 10,
    title: { en: "Python: Sum of Two Numbers" },
    description: { en: "Write a Python program that accepts two numbers from the user and displays the sum of the two numbers." },
    difficulty: "beginner",
    startingCode: "num1_str = input()\nnum2_str = input()\n# Convert strings to numbers and calculate sum\nnum1 = float(num1_str)\nnum2 = float(num2_str)\nsum_result = num1 + num2\nprint(f\"The sum is: {sum_result}\")",
    points: 10,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 11,
    title: { en: "Python: Check if Positive" },
    description: { en: "Write a Python program that takes a number from the user and checks if it is positive, negative, or zero." },
    difficulty: "beginner",
    startingCode: "number_str = input()\nnumber = float(number_str)\n# Check if the number is positive, negative, or zero\nif number > 0:\n    print(\"Positive\")\nelif number < 0:\n    print(\"Negative\")\nelse:\n    print(\"Zero\")",
    points: 15,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 12,
    title: { en: "Python: String Reversal" },
    description: { en: "Write a Python program that takes a string from the user and prints the reversed string." },
    difficulty: "intermediate",
    startingCode: "text = input()\n# Reverse the string\nreversed_text = text[::-1]\nprint(f\"Reversed string: {reversed_text}\")",
    points: 20,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 13,
    title: { en: "Python: Factorial Calculation" },
    description: { en: "Write a Python function that calculates the factorial of a given non-negative integer." },
    difficulty: "intermediate",
    startingCode: "def factorial(n):\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\nnum_str = input()\nnum = int(num_str)\nprint(f\"Factorial of {num} is: {factorial(num)}\")",
    points: 20,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 14,
    title: { en: "Python: Find Max in List" },
    description: { en: "Write a Python program to find the maximum value in a list of numbers entered by the user (separated by spaces)." },
    difficulty: "intermediate",
    startingCode: "numbers_str = input()\n# Convert string of numbers to a list of floats\nnumbers = [float(n) for n in numbers_str.split()]\n\nif not numbers:\n    print(\"List is empty\")\nelse:\n    max_val = numbers[0]\n    for num in numbers:\n        if num > max_val:\n            max_val = num\n    print(f\"Maximum value: {max_val}\")",
    points: 20,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 15,
    title: { en: "Python: Count Vowels" },
    description: { en: "Write a Python program that counts the number of vowels (a, e, i, o, u, case-insensitive) in a given string." },
    difficulty: "intermediate",
    startingCode: "text = input()\nvowels = \"aeiouAEIOU\"\ncount = 0\n# Count vowels in the text\nfor char in text:\n    if char in vowels:\n        count += 1\nprint(f\"Number of vowels: {count}\")",
    points: 20,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 16,
    title: { en: "Python: Simple List Comprehension" },
    description: { en: "Use a List Comprehension in Python to create a list of even numbers from 1 to 10 (inclusive)." },
    difficulty: "advanced",
    startingCode: "# Create a list of even numbers from 1 to 10 using list comprehension\neven_numbers = [x for x in range(1, 11) if x % 2 == 0]\nprint(even_numbers)",
    points: 25,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 17,
    title: { en: "Python: Print a Message" },
    description: { en: "Write a Python program that prints the message 'CodeCampus is fun!' to the console." },
    difficulty: "beginner",
    startingCode: "print(\"CodeCampus is fun!\")",
    points: 5,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 18,
    title: { en: "Python: Store and Print a Number" },
    description: { en: "Assign the number 42 to a variable named 'my_number' and then print the value of this variable." },
    difficulty: "beginner",
    startingCode: "my_number = 42\nprint(my_number)",
    points: 5,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 19,
    title: { en: "Python: Add Two Numbers" },
    description: { en: "Write a Python program that defines two variables, `a` with value 10 and `b` with value 5. Calculate their sum and print it." },
    difficulty: "beginner",
    startingCode: "a = 10\nb = 5\n# Calculate sum and print\nsum_val = a + b\nprint(sum_val)",
    points: 10,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 20,
    title: { en: "Python: Combine Strings" },
    description: { en: "Create two string variables, `greeting` with value 'Hello' and `name` with value 'Student'. Combine them with a space in between and print the result." },
    difficulty: "beginner",
    startingCode: "greeting = \"Hello\"\nname = \"Student\"\n# Combine and print\nfull_greeting = greeting + \" \" + name\nprint(full_greeting)",
    points: 10,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 21,
    title: { en: "Python: Check Age" },
    description: { en: "Given a variable `age` set to 20, write an if statement that prints 'Adult' if age is 18 or greater." },
    difficulty: "beginner",
    startingCode: "age = 20\n# Write your if statement here\nif age >= 18:\n    print(\"Adult\")",
    points: 10,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 22,
    title: { en: "Python: Print Numbers 1 to 3" },
    description: { en: "Use a for loop with the `range()` function to print numbers from 1 to 3, each on a new line." },
    difficulty: "beginner",
    startingCode: "# Use a for loop here\nfor i in range(1, 4):\n    print(i)",
    points: 10,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 23,
    title: { en: "Python: Access List Element" },
    description: { en: "Create a list named `colors` containing 'red', 'green', and 'blue'. Print the second element of the list." },
    difficulty: "beginner",
    startingCode: "colors = [\"red\", \"green\", \"blue\"]\n# Print the second element\nprint(colors[1])",
    points: 10,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 24,
    title: { en: "Python: Count Item Occurrences in List using Dictionary" },
    description: { en: "Write a Python program that takes a list of items (e.g., fruits) and counts the occurrences of each item using a dictionary. Print the dictionary. Input list: `['apple', 'banana', 'apple', 'orange', 'banana', 'apple']`" },
    difficulty: "advanced",
    startingCode: "items_list = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\nitem_counts = {}\n# Iterate through the list and count occurrences\nfor item in items_list:\n    if item in item_counts:\n        item_counts[item] += 1\n    else:\n        item_counts[item] = 1\n\n# To ensure consistent output order for testing, print sorted by key\n# This is a common way to test dictionary content when order doesn't matter for correctness but does for exact string matching.\n# Note: In Python 3.7+ dictionaries preserve insertion order, but sorting ensures test stability across versions.\n# For this problem, the exact format {'apple': 3, 'banana': 2, 'orange': 1} is fine if Python 3.7+ is assumed for testing.\n# If stricter output matching is needed without assuming dict order, one might convert to sorted list of tuples.\n# For now, we'll assume direct print is okay for typical modern Python environments.\nprint(item_counts)",
    points: 25,
    language: "python",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 25,
    title: { en: "HTML: Basic Page Structure" },
    description: { en: "Create a basic HTML page with a title 'My First Page' and a heading 'Welcome to my website'. Execution is not supported, this is for practice." },
    difficulty: "beginner",
    startingCode: "<!DOCTYPE html>\n<html>\n<head>\n  <title>My First Page</title>\n</head>\n<body>\n  <h1>Welcome to my website</h1>\n</body>\n</html>",
    points: 5,
    language: "html",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 26,
    title: { en: "JavaScript: Console Log" },
    description: { en: "Write a simple JavaScript program that logs the message 'Hello, JavaScript!' to the developer console. Execution is not supported, this is for practice." },
    difficulty: "beginner",
    startingCode: "// Your JavaScript code here\n\nconsole.log('Hello, JavaScript!');",
    points: 5,
    language: "javascript",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 27,
    title: { en: "C++: Function to Add Numbers" },
    description: { en: "Write a C++ function named 'add' that takes two integers as input and returns their sum. Then, call this function in main() with numbers 5 and 7 and print the result." },
    difficulty: "beginner",
    startingCode: "#include <iostream>\nusing namespace std;\n\n// Define the 'add' function here\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n  // Call the function and print the result\n  cout << add(5, 7) << endl;\n  return 0;\n}",
    points: 15,
    language: "cpp",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 28,
    title: { en: "C++: Reverse a String" },
    description: { en: "Write a C++ program that takes a string 'hello' and prints it in reverse." },
    difficulty: "intermediate",
    startingCode: "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n  string s = \"hello\";\n  // Reverse the string and print it\n  reverse(s.begin(), s.end());\n  cout << s << endl;\n  return 0;\n}",
    points: 20,
    language: "cpp",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 29,
    title: { en: "C++: Using Structs" },
    description: { en: "Define a struct named 'Student' with two members: a string 'name' and an int 'age'. Create a Student variable, assign it a name and age, and then print them." },
    difficulty: "intermediate",
    startingCode: "#include <iostream>\n#include <string>\nusing namespace std;\n\n// Define the Student struct here\nstruct Student {\n    string name;\n    int age;\n};\n\nint main() {\n  // Create a student, assign values, and print\n  Student s1;\n  s1.name = \"John\";\n  s1.age = 20;\n  cout << \"Name: \" << s1.name << \", Age: \" << s1.age << endl;\n  return 0;\n}",
    points: 20,
    language: "cpp",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 30,
    title: { en: "C++: 2D Array Sum" },
    description: { en: "Given a 2x3 integer array, calculate the sum of all its elements and print the total." },
    difficulty: "intermediate",
    startingCode: "#include <iostream>\nusing namespace std;\n\nint main() {\n  int arr[2][3] = {{1, 2, 3}, {4, 5, 6}};\n  int sum = 0;\n  // Use nested loops to calculate the sum\n  for(int i = 0; i < 2; ++i) {\n    for(int j = 0; j < 3; ++j) {\n      sum += arr[i][j];\n    }\n  }\n  cout << \"Sum: \" << sum << endl;\n  return 0;\n}",
    points: 25,
    language: "cpp",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 31,
    title: { en: "HTML: Unordered and Ordered Lists" },
    description: { en: "Create an HTML document that contains an unordered list of three fruits and an ordered list of three steps to make tea." },
    difficulty: "beginner",
    startingCode: "<!DOCTYPE html>\n<html>\n<head><title>Lists</title></head>\n<body>\n  <h2>Favorite Fruits</h2>\n  <ul>\n    <li>Apple</li>\n    <li>Banana</li>\n    <li>Orange</li>\n  </ul>\n  <h2>Tea Recipe</h2>\n  <ol>\n    <li>Boil water</li>\n    <li>Add tea bag</li>\n    <li>Add milk</li>\n  </ol>\n</body>\n</html>",
    points: 5,
    language: "html",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 32,
    title: { en: "HTML: Adding an Image" },
    description: { en: "Embed an image in an HTML page. Use the placeholder URL 'https://placehold.co/600x400.png' and provide an alternative text 'Placeholder Image'." },
    difficulty: "beginner",
    startingCode: "<!DOCTYPE html>\n<html>\n<head><title>Image</title></head>\n<body>\n  <h1>An Image</h1>\n  <img src=\"https://placehold.co/600x400.png\" alt=\"Placeholder Image\">\n</body>\n</html>",
    points: 5,
    language: "html",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 33,
    title: { en: "HTML: Creating a Link" },
    description: { en: "Create a hyperlink that displays the text 'Visit Google' and links to 'https://www.google.com'. The link should open in a new tab." },
    difficulty: "beginner",
    startingCode: "<!DOCTYPE html>\n<html>\n<head><title>Link</title></head>\n<body>\n  <a href=\"https://www.google.com\" target=\"_blank\">Visit Google</a>\n</body>\n</html>",
    points: 5,
    language: "html",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 34,
    title: { en: "HTML: Simple Table" },
    description: { en: "Create a 2x2 HTML table. The first row should contain headers 'Name' and 'Age'. The second row should contain data 'John' and '25'." },
    difficulty: "intermediate",
    startingCode: "<!DOCTYPE html>\n<html>\n<head><title>Table</title></head>\n<body>\n  <table border=\"1\">\n    <tr>\n      <th>Name</th>\n      <th>Age</th>\n    </tr>\n    <tr>\n      <td>John</td>\n      <td>25</td>\n    </tr>\n  </table>\n</body>\n</html>",
    points: 10,
    language: "html",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 35,
    title: { en: "HTML: Basic Form" },
    description: { en: "Create a simple HTML form with a text input field for 'Username' and a submit button." },
    difficulty: "intermediate",
    startingCode: "<!DOCTYPE html>\n<html>\n<head><title>Form</title></head>\n<body>\n  <form>\n    <label for=\"username\">Username:</label><br>\n    <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n</body>\n</html>",
    points: 10,
    language: "html",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 36,
    title: { en: "HTML: Divs and Spans" },
    description: { en: "Create a `<div>` that acts as a container for a paragraph. Inside the paragraph, use a `<span>` to highlight a single word." },
    difficulty: "beginner",
    startingCode: "<!DOCTYPE html>\n<html>\n<head><title>Divs and Spans</title>\n<style>span { color: red; }</style>\n</head>\n<body>\n  <div>\n    <p>This is a <span class=\"highlight\">special</span> word.</p>\n  </div>\n</body>\n</html>",
    points: 5,
    language: "html",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 37,
    title: { en: "HTML: Semantic Tags" },
    description: { en: "Structure a simple page using HTML5 semantic tags: `<header>`, `<nav>`, `<main>`, `<article>`, and `<footer>`." },
    difficulty: "intermediate",
    startingCode: "<!DOCTYPE html>\n<html>\n<head><title>Semantic HTML</title></head>\n<body>\n  <header>\n    <h1>My Website</h1>\n  </header>\n  <nav>\n    <a href=\"#\">Home</a> | <a href=\"#\">About</a>\n  </nav>\n  <main>\n    <article>\n      <h2>Article Title</h2>\n      <p>This is the main content.</p>\n    </article>\n  </main>\n  <footer>\n    <p>&copy; 2024 My Website</p>\n  </footer>\n</body>\n</html>",
    points: 15,
    language: "html",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 38,
    title: { en: "HTML: Comments" },
    description: { en: "Add an HTML comment to a paragraph tag to explain what it is for." },
    difficulty: "beginner",
    startingCode: "<!DOCTYPE html>\n<html>\n<head><title>Comments</title></head>\n<body>\n  <!-- This is the main introduction -->\n  <p>Welcome to our page.</p>\n</body>\n</html>",
    points: 5,
    language: "html",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 39,
    title: { en: "JavaScript: Variables and Types" },
    description: { en: "Declare a variable for a name (string), an age (number), and whether the user is a student (boolean). Log all three to the console." },
    difficulty: "beginner",
    startingCode: "const name = 'Alex';\nconst age = 22;\nconst isStudent = true;\n\nconsole.log(name);\nconsole.log(age);\nconsole.log(isStudent);",
    points: 5,
    language: "javascript",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 40,
    title: { en: "JavaScript: Write a Function" },
    description: { en: "Write a JavaScript function called `multiply` that takes two numbers as arguments and returns their product." },
    difficulty: "beginner",
    startingCode: "function multiply(a, b) {\n  return a * b;\n}\n\n// Example call (you can test with this)\nconsole.log(multiply(5, 4));",
    points: 10,
    language: "javascript",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 41,
    title: { en: "JavaScript: Loop Through an Array" },
    description: { en: "Create an array of your three favorite foods. Use a `for` loop to iterate through the array and log each food to the console." },
    difficulty: "beginner",
    startingCode: "const foods = ['Pizza', 'Sushi', 'Tacos'];\n\nfor (let i = 0; i < foods.length; i++) {\n  console.log(foods[i]);\n}",
    points: 10,
    language: "javascript",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 42,
    title: { en: "JavaScript: Create an Object" },
    description: { en: "Create a JavaScript object to represent a car with properties for `make`, `model`, and `year`. Log the `model` property to the console." },
    difficulty: "beginner",
    startingCode: "const car = {\n  make: 'Toyota',\n  model: 'Camry',\n  year: 2021\n};\n\nconsole.log(car.model);",
    points: 10,
    language: "javascript",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 43,
    title: { en: "JavaScript: DOM Manipulation" },
    description: { en: "Imagine an HTML file with `<h1 id=\"title\">Hello</h1>`. Write JavaScript to get this element by its ID and change its text content to 'Hello, World!'." },
    difficulty: "intermediate",
    startingCode: "// Assume this HTML exists: <h1 id=\\\"title\\\">Hello</h1>\nconst titleElement = document.getElementById('title');\nif (titleElement) {\n  titleElement.textContent = 'Hello, World!';\n}",
    points: 15,
    language: "javascript",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 44,
    title: { en: "JavaScript: Button Click Event" },
    description: { en: "Imagine an HTML file with `<button id=\"myBtn\">Click Me</button>`. Write JavaScript to add an event listener that shows an alert with the message 'Button clicked!' when the button is clicked." },
    difficulty: "intermediate",
    startingCode: "// Assume this HTML exists: <button id=\\\"myBtn\\\">Click Me</button>\nconst myButton = document.getElementById('myBtn');\nif (myButton) {\n  myButton.addEventListener('click', function() {\n    alert('Button clicked!');\n  });\n}",
    points: 15,
    language: "javascript",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 45,
    title: { en: "JavaScript: Sum Array with Loop" },
    description: { en: "Given an array of numbers `[10, 20, 30]`, use a loop to calculate the sum of the elements and log the total to the console." },
    difficulty: "intermediate",
    startingCode: "const numbers = [10, 20, 30];\nlet sum = 0;\n\nfor (const number of numbers) {\n  sum += number;\n}\n\nconsole.log(sum);",
    points: 15,
    language: "javascript",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 46,
    title: { en: "JavaScript: Template Literals" },
    description: { en: "Given a `name` and `age`, create a sentence 'My name is [name] and I am [age] years old.' using template literals." },
    difficulty: "beginner",
    startingCode: "const name = 'Jane';\nconst age = 28;\n\nconst sentence = `My name is ${name} and I am ${age} years old.`;\n\nconsole.log(sentence);",
    points: 5,
    language: "javascript",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 47,
    title: { en: "JavaScript: ES6 Arrow Function" },
    description: { en: "Rewrite the following traditional function using ES6 arrow function syntax: `function add(a, b) { return a + b; }`" },
    difficulty: "intermediate",
    startingCode: "// Traditional function:\n// function add(a, b) { return a + b; }\n\n// Rewrite as an arrow function below\nconst add = (a, b) => a + b;\n\nconsole.log(add(2, 3));",
    points: 10,
    language: "javascript",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 48,
    title: { en: "React: Simple Functional Component" },
    description: { en: "Create a simple React functional component named 'Greeting' that displays a 'Hello, React!' message inside an h1 tag. Assume this is inside an App component." },
    difficulty: "beginner",
    startingCode: "import React from 'react';\n\n// Create your component here\nconst Greeting = () => {\n  return <h1>Hello, React!</h1>;\n};\n\n// We will assume this is rendered inside the main App component\nconst App = () => {\n  return <Greeting />;\n};\n\nexport default App;",
    points: 10,
    language: "react",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 49,
    title: { en: "React: Component with Props" },
    description: { en: "Create a React component named 'Welcome' that accepts a 'name' prop and displays a personalized welcome message like 'Welcome, [name]!'." },
    difficulty: "beginner",
    startingCode: "import React from 'react';\n\n// Create your component here\nconst Welcome = (props) => {\n  return <h2>Welcome, {props.name}!</h2>;\n};\n\nconst App = () => {\n  return <Welcome name=\"Alice\" />;\n};\n\nexport default App;",
    points: 15,
    language: "react",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 50,
    title: { en: "React: Counter with State" },
    description: { en: "Create a React component named 'Counter' that has a button. When the button is clicked, a number on the screen should increment by 1. The counter should start at 0." },
    difficulty: "intermediate",
    startingCode: "import React, { useState } from 'react';\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n};\n\nconst App = () => {\n  return <Counter />;\n};\n\nexport default App;",
    points: 20,
    language: "react",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 51,
    title: { en: "React: Conditional Rendering" },
    description: { en: "Create a React component 'LoginMessage' that takes an 'isLoggedIn' boolean prop. If the prop is true, it should render 'Welcome back!'. If it's false, it should render 'Please log in.'" },
    difficulty: "intermediate",
    startingCode: "import React from 'react';\n\nconst LoginMessage = ({ isLoggedIn }) => {\n  return (\n    <div>\n      {isLoggedIn ? (\n        <h1>Welcome back!</h1>\n      ) : (\n        <h1>Please log in.</h1>\n      )}\n    </div>\n  );\n};\n\nconst App = () => {\n  // Try changing this value to see the different outputs!\n  return <LoginMessage isLoggedIn={true} />;\n};\n\nexport default App;",
    points: 20,
    language: "react",
    creatorId: "admin-001",
    scope: "global",
  },
  {
    id: 52,
    title: { en: "React: Mapping a List" },
    description: { en: "Given an array of strings ['learn react', 'build a project', 'deploy app'], create a React component 'TodoList' that renders this array as an unordered list (`<ul>`)." },
    difficulty: "intermediate",
    startingCode: "import React from 'react';\n\nconst todos = ['learn react', 'build a project', 'deploy app'];\n\nconst TodoList = () => {\n  return (\n    <ul>\n      {todos.map((todo, index) => (\n        <li key={index}>{todo}</li>\n      ))}\n    </ul>\n  );\n};\n\nconst App = () => {\n  return <TodoList />;\n};\n\nexport default App;",
    points: 25,
    language: "react",
    creatorId: "admin-001",
    scope: "global",
  }
];

export const mockProgressData: ProgressDataPoint[] = [
  { name: 'Week 1', exercises: 2, problems: 5 },
  { name: 'Week 2', exercises: 4, problems: 7 },
  { name: 'Week 3', exercises: 3, problems: 9 },
  { name: 'Week 4', exercises: 5, problems: 12 },
  { name: 'Week 5', exercises: 7, problems: 15 },
];

export const mockInitialSavedCodes: CodeSnippet[] = [
    { id: "1", title: "My First Program.cpp", userId: "student-001", code: "#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello, World!\" << endl;\n  return 0;\n}", createdAt: new Date(), updatedAt: new Date() },
    { id: "2", title: "Calculator Stub.cpp", userId: "student-001", code: "#include <iostream>\nusing namespace std;\nint main() {\n  double a, b;\n  char op;\n  cout << \"Enter number, operator, number (e.g. 3 + 5): \";\n  cin >> a >> op >> b;\n  cout << \"Result: \" << endl;\n  return 0;\n}", createdAt: new Date(), updatedAt: new Date() }
];

export const initialMockUsers: User[] = [
  {
    id: 'admin-001',
    username: 'admin',
    no: '000',
    studentId: 'admin',
    fullName: 'Admin User',
    email: 'admin@example.com',
    role: 'lecturer',
    isAdmin: true,
    mustChangePassword: false,
    completedExercises: [],
    totalScore: 0,
    enrolledClassIds: [],
    pendingClassRequests: [],
    institutionId: 'default-institution-001',
    billingBalance: 0,
  },
  {
    id: 'student-001',
    username: 'student1',
    no: '001',
    studentId: 'S6500001',
    fullName: 'Student User One',
    email: 'student1@example.com',
    role: 'student',
    isAdmin: false,
    mustChangePassword: false,
    completedExercises: [],
    totalScore: 0,
    enrolledClassIds: [],
    pendingClassRequests: [],
    institutionId: 'default-institution-001',
  },
  {
    id: 'normal-001',
    username: 'normaluser1',
    no: '002',
    studentId: 'N6500002',
    fullName: 'Normal User One',
    email: 'normaluser1@example.com',
    role: 'normal',
    isAdmin: false,
    mustChangePassword: false,
    completedExercises: [],
    totalScore: 0,
    enrolledClassIds: [],
    pendingClassRequests: [],
    institutionId: 'default-institution-001',
  }
];

export const mockClassGroups: ClassGroup[] = [];

export const initialMockLabs: Lab[] = [
  {
    id: "lab-template-001",
    title: { en: "Basic C++ Syntax Lab" },
    description: { en: "A lab to practice basic C++ syntax including variables, I/O, and control flow." },
    creatorId: "admin-001",
    isTemplate: true,
    scope: "global",
    challenges: [
      {
        id: "ch-001-1",
        labId: "lab-template-001",
        title: "Hello World & Input",
        description: "Write a C++ program that prints 'Hello, World!' and then asks for the user's name and greets them.",
        language: "cpp",
        targetCodes: [
          { 
            id: "tc-001-1-1", 
            code: "#include <iostream>\n#include <string>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    std::string name;\n    std::cin >> name;\n    std::cout << \"Hello, \" << name << \"!\" << std::endl;\n    return 0;\n}", 
            requiredOutputSimilarity: 100, 
            description: { en: "Standard greeting" },
            points: 100,
            testCases: [{ input: "Tester" }, { input: "CodeCampus" }],
          }
        ]
      },
      {
        id: "ch-001-2",
        labId: "lab-template-001",
        title: "Basic Python I/O",
        description: "Write a Python program that prints 'Hello from Python!' and then asks for the user's age and prints it.",
        language: "python",
        targetCodes: [
          { 
            id: "tc-001-2-1", 
            code: "print(\"Hello from Python!\")\nage = input(\"Enter your age: \")\nprint(f\"You are {age} years old.\")", 
            requiredOutputSimilarity: 100, 
            description: { en: "Python greeting and age" },
            points: 100,
            testCases: [{input: "25"}],
          }
        ]
      }
    ]
  }
];

export const initialMockTransactions: BillingTransaction[] = [];
